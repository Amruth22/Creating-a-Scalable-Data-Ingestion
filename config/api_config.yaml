# API Configuration
# Configuration for all API endpoints, authentication, and API ingestion settings

# Default API Settings
default_settings:
  timeout_seconds: 30
  retry_attempts: 3
  retry_delay_seconds: 5
  rate_limit_requests_per_minute: 60
  batch_size: 100
  user_agent: "DataIngestionPipeline/1.0.0"
  
  # Default headers
  default_headers:
    "Content-Type": "application/json"
    "Accept": "application/json"
    "User-Agent": "DataIngestionPipeline/1.0.0"
    
  # SSL/TLS settings
  ssl:
    verify_certificates: true
    ssl_version: "TLSv1.2"
    
  # Proxy settings (if needed)
  proxy:
    enabled: false
    http_proxy: ""
    https_proxy: ""
    no_proxy: "localhost,127.0.0.1"

# API Endpoints Configuration
endpoints:
  # JSONPlaceholder API (for testing/demo)
  jsonplaceholder:
    name: "JSONPlaceholder Demo API"
    base_url: "https://jsonplaceholder.typicode.com"
    enabled: true
    
    # Authentication (none for JSONPlaceholder)
    authentication:
      type: "none"
      
    # Rate limiting
    rate_limiting:
      requests_per_minute: 100
      requests_per_hour: 1000
      burst_limit: 10
      
    # Endpoints
    endpoints:
      posts:
        path: "/posts"
        method: "GET"
        description: "Get all posts (simulating orders)"
        parameters:
          _limit: 100
          _page: 1
        response_format: "json"
        
      users:
        path: "/users"
        method: "GET"
        description: "Get all users (simulating customers)"
        response_format: "json"
        
      comments:
        path: "/comments"
        method: "GET"
        description: "Get all comments"
        parameters:
          _limit: 500
        response_format: "json"
        
    # Data mapping for orders simulation
    data_mapping:
      posts_to_orders:
        order_id: "id"
        customer_name: "userId"  # Will be mapped to actual user name
        product: "title"
        quantity: 1  # Default value
        price: 99.99  # Default value
        order_date: "2024-01-15"  # Default value
        source: "api"
        
  # E-commerce API (example configuration)
  ecommerce_api:
    name: "E-commerce Orders API"
    base_url: "${ECOMMERCE_API_URL:-https://api.example-store.com}"
    enabled: false  # Disabled by default
    
    # API Key authentication
    authentication:
      type: "api_key"
      api_key: "${ECOMMERCE_API_KEY}"
      key_location: "header"  # header, query, or body
      key_name: "X-API-Key"
      
    # Rate limiting
    rate_limiting:
      requests_per_minute: 60
      requests_per_hour: 1000
      burst_limit: 5
      
    # Retry configuration
    retry:
      attempts: 3
      delay_seconds: 5
      backoff_multiplier: 2.0
      max_delay_seconds: 60
      retry_on_status_codes: [429, 500, 502, 503, 504]
      
    # Endpoints
    endpoints:
      orders:
        path: "/api/v1/orders"
        method: "GET"
        description: "Get orders"
        parameters:
          limit: 100
          offset: 0
          status: "completed"
          created_after: "{last_sync_time}"
        response_format: "json"
        pagination:
          type: "offset"  # offset, cursor, page
          limit_param: "limit"
          offset_param: "offset"
          max_per_request: 100
          
      customers:
        path: "/api/v1/customers"
        method: "GET"
        description: "Get customers"
        parameters:
          limit: 200
          updated_after: "{last_sync_time}"
        response_format: "json"
        
      products:
        path: "/api/v1/products"
        method: "GET"
        description: "Get products"
        parameters:
          limit: 500
          active_only: true
        response_format: "json"
        
    # Data mapping
    data_mapping:
      orders:
        order_id: "id"
        customer_name: "customer.name"
        customer_email: "customer.email"
        product: "items[0].product_name"
        product_category: "items[0].category"
        quantity: "items[0].quantity"
        price: "items[0].unit_price"
        discount: "discount_amount"
        total_amount: "total_amount"
        order_date: "created_at"
        store_location: "store.name"
        source: "api"
        
  # Partner API
  partner_api:
    name: "Partner Store API"
    base_url: "${PARTNER_API_URL:-https://partner-api.example.com}"
    enabled: false
    
    # OAuth2 authentication
    authentication:
      type: "oauth2"
      client_id: "${PARTNER_CLIENT_ID}"
      client_secret: "${PARTNER_CLIENT_SECRET}"
      token_url: "https://partner-api.example.com/oauth/token"
      scope: "orders:read customers:read"
      
    # Rate limiting
    rate_limiting:
      requests_per_minute: 30
      requests_per_hour: 500
      burst_limit: 3
      
    endpoints:
      orders:
        path: "/v2/orders"
        method: "GET"
        description: "Get partner orders"
        parameters:
          per_page: 50
          page: 1
          status: "fulfilled"
          updated_at_min: "{last_sync_time}"
        response_format: "json"
        pagination:
          type: "page"
          page_param: "page"
          per_page_param: "per_page"
          max_per_request: 50
          
    data_mapping:
      orders:
        order_id: "order_number"
        customer_name: "billing_address.name"
        customer_email: "email"
        product: "line_items[0].title"
        quantity: "line_items[0].quantity"
        price: "line_items[0].price"
        total_amount: "total_price"
        order_date: "created_at"
        source: "partner"
        
  # Webhook receiver configuration
  webhook_receiver:
    name: "Webhook Receiver"
    enabled: false
    
    # Server configuration
    server:
      host: "0.0.0.0"
      port: 8080
      ssl_enabled: false
      ssl_cert_path: ""
      ssl_key_path: ""
      
    # Webhook endpoints
    webhooks:
      orders:
        path: "/webhooks/orders"
        method: "POST"
        authentication:
          type: "signature"
          secret: "${WEBHOOK_SECRET}"
          header_name: "X-Webhook-Signature"
          algorithm: "sha256"
        data_mapping:
          order_id: "data.id"
          customer_name: "data.customer.name"
          product: "data.line_items[0].name"
          total_amount: "data.total_price"
          order_date: "data.created_at"
          source: "webhook"

# API Data Sources Configuration
data_sources:
  # JSONPlaceholder posts as orders
  jsonplaceholder_orders:
    source_id: "jsonplaceholder_orders"
    name: "JSONPlaceholder Orders (Demo)"
    api_endpoint: "jsonplaceholder"
    endpoint_name: "posts"
    enabled: true
    
    # Extraction settings
    extraction:
      batch_size: 100
      timeout_seconds: 30
      schedule_interval_seconds: 3600  # 1 hour
      max_records_per_run: 1000
      
    # Incremental loading
    incremental:
      enabled: false  # JSONPlaceholder doesn't support incremental
      mode: "full_refresh"
      
    # Data transformation
    transformation:
      enabled: true
      
      # Field mappings and transformations
      field_mappings:
        - source_field: "id"
          target_field: "order_id"
          transformation: "prefix"
          transformation_params:
            prefix: "API-"
            
        - source_field: "userId"
          target_field: "customer_id"
          transformation: "none"
          
        - source_field: "title"
          target_field: "product"
          transformation: "truncate"
          transformation_params:
            max_length: 100
            
        - source_field: "body"
          target_field: "notes"
          transformation: "clean_text"
          
      # Static field assignments
      static_fields:
        quantity: 1
        price: 99.99
        discount: 0.0
        source: "jsonplaceholder_api"
        product_category: "Electronics"
        
      # Calculated fields
      calculated_fields:
        - name: "total_amount"
          formula: "quantity * price - discount"
        - name: "order_date"
          formula: "current_date()"
        - name: "customer_name"
          formula: "concat('Customer ', customer_id)"
          
  # E-commerce API orders
  ecommerce_orders:
    source_id: "ecommerce_orders"
    name: "E-commerce API Orders"
    api_endpoint: "ecommerce_api"
    endpoint_name: "orders"
    enabled: false
    
    extraction:
      batch_size: 100
      timeout_seconds: 60
      schedule_interval_seconds: 1800  # 30 minutes
      max_records_per_run: 5000
      
    incremental:
      enabled: true
      mode: "timestamp"
      timestamp_field: "created_at"
      initial_timestamp: "2024-01-01T00:00:00Z"
      
    transformation:
      enabled: true
      field_mappings:
        - source_field: "id"
          target_field: "order_id"
        - source_field: "customer.name"
          target_field: "customer_name"
        - source_field: "customer.email"
          target_field: "customer_email"
        - source_field: "items[0].product_name"
          target_field: "product"
        - source_field: "total_amount"
          target_field: "total_amount"
          transformation: "to_decimal"
          
  # Partner API orders
  partner_orders:
    source_id: "partner_orders"
    name: "Partner API Orders"
    api_endpoint: "partner_api"
    endpoint_name: "orders"
    enabled: false
    
    extraction:
      batch_size: 50
      timeout_seconds: 45
      schedule_interval_seconds: 7200  # 2 hours
      max_records_per_run: 2000
      
    incremental:
      enabled: true
      mode: "timestamp"
      timestamp_field: "updated_at"
      initial_timestamp: "2024-01-01T00:00:00Z"

# API Monitoring Configuration
monitoring:
  enabled: true
  
  # Health checks
  health_checks:
    enabled: true
    check_interval_seconds: 300  # 5 minutes
    timeout_seconds: 10
    
    # Endpoints to monitor
    endpoints:
      - name: "jsonplaceholder_health"
        url: "https://jsonplaceholder.typicode.com/posts/1"
        method: "GET"
        expected_status: 200
        
  # Performance monitoring
  performance:
    enabled: true
    
    # Metrics to track
    metrics:
      - name: "response_time"
        threshold_ms: 5000
      - name: "success_rate"
        threshold_percent: 95
      - name: "rate_limit_usage"
        threshold_percent: 80
      - name: "error_rate"
        threshold_percent: 5
        
  # Alerting
  alerts:
    enabled: true
    
    # Alert conditions
    conditions:
      - name: "api_endpoint_down"
        condition: "status_code != 200"
        severity: "critical"
        
      - name: "high_response_time"
        condition: "response_time > 10000"
        severity: "warning"
        
      - name: "rate_limit_exceeded"
        condition: "rate_limit_remaining < 10"
        severity: "warning"
        
      - name: "authentication_failure"
        condition: "status_code == 401"
        severity: "critical"

# Error Handling Configuration
error_handling:
  # Retry configuration
  retry:
    enabled: true
    max_attempts: 3
    initial_delay_seconds: 5
    backoff_multiplier: 2.0
    max_delay_seconds: 300
    
    # HTTP status codes to retry
    retry_status_codes:
      - 429  # Too Many Requests
      - 500  # Internal Server Error
      - 502  # Bad Gateway
      - 503  # Service Unavailable
      - 504  # Gateway Timeout
      
  # Circuit breaker
  circuit_breaker:
    enabled: true
    failure_threshold: 5
    recovery_timeout_seconds: 300
    half_open_max_calls: 3
    
  # Fallback strategies
  fallback:
    enabled: true
    strategies:
      - name: "cached_response"
        description: "Use cached response if available"
        max_age_seconds: 3600
        
      - name: "default_values"
        description: "Use default values for missing data"
        
      - name: "skip_source"
        description: "Skip this data source and continue"

# Caching Configuration
caching:
  enabled: true
  
  # Cache settings
  cache:
    type: "memory"  # memory, redis, file
    max_size_mb: 100
    ttl_seconds: 3600  # 1 hour
    
  # Cache strategies
  strategies:
    - name: "response_cache"
      description: "Cache API responses"
      key_pattern: "api_response_{endpoint}_{params_hash}"
      ttl_seconds: 1800  # 30 minutes
      
    - name: "authentication_cache"
      description: "Cache authentication tokens"
      key_pattern: "auth_token_{endpoint}"
      ttl_seconds: 3300  # 55 minutes (tokens usually expire in 1 hour)

# Environment-specific API Settings
environments:
  development:
    default_settings:
      timeout_seconds: 60  # Longer timeout for debugging
      retry_attempts: 1    # Fewer retries in dev
      
    endpoints:
      jsonplaceholder:
        rate_limiting:
          requests_per_minute: 200  # Higher limit for testing
          
    monitoring:
      health_checks:
        check_interval_seconds: 600  # Less frequent in dev
        
  staging:
    endpoints:
      ecommerce_api:
        base_url: "https://staging-api.example-store.com"
        
    monitoring:
      alerts:
        enabled: false  # Disable alerts in staging
        
  production:
    default_settings:
      timeout_seconds: 15  # Stricter timeout in production
      retry_attempts: 5    # More retries in production
      
    monitoring:
      health_checks:
        check_interval_seconds: 60  # More frequent monitoring
        
      alerts:
        enabled: true
        
    error_handling:
      circuit_breaker:
        failure_threshold: 3  # More sensitive in production
        
    caching:
      cache:
        max_size_mb: 500  # Larger cache in production
        ttl_seconds: 1800  # Shorter TTL in production